[0m[[0m[31merror[0m] [0m[0m/home/stelios/workspace/GmailScraper/src/main/scala/com/ScalaScraper/ScalaImapSsl.scala:229:214: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Char[0m
[0m[[0m[31merror[0m] [0m[0m required: String[0m
[0m[[0m[31merror[0m] [0m[0m    val minIndex = result.zipWithIndex.filter{case (value,index) => lastIndex.indexOf(value)!= -1}.foldLeft(("not_found".asInstanceOf[String],-1.asInstanceOf[Int]))((acc, value) => if(acc._1 =="not_found") (value._1,value._2) else if(acc._1 !="not_found" && (lastIndex.indexOf(value._1) < lastIndex.indexOf(acc._1))) (value._1,value._2) else (acc._1,acc._2) ).asInstanceOf[Tuple2[String,Int]]._2[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                                                                                                                                                     ^[0m
[0m[[0m[31merror[0m] [0m[0m/home/stelios/workspace/GmailScraper/src/main/scala/com/ScalaScraper/ScalaImapSsl.scala:229:325: type mismatch;[0m
[0m[[0m[31merror[0m] [0m[0m found   : Char[0m
[0m[[0m[31merror[0m] [0m[0m required: String[0m
[0m[[0m[31merror[0m] [0m[0m    val minIndex = result.zipWithIndex.filter{case (value,index) => lastIndex.indexOf(value)!= -1}.foldLeft(("not_found".asInstanceOf[String],-1.asInstanceOf[Int]))((acc, value) => if(acc._1 =="not_found") (value._1,value._2) else if(acc._1 !="not_found" && (lastIndex.indexOf(value._1) < lastIndex.indexOf(acc._1))) (value._1,value._2) else (acc._1,acc._2) ).asInstanceOf[Tuple2[String,Int]]._2[0m
[0m[[0m[31merror[0m] [0m[0m                                                                                                                                                                                                                                                                                                                                    ^[0m
[0m[[0m[31merror[0m] [0m[0mtwo errors found[0m
